{"version":3,"sources":["GroceryItem.js","App.js","serviceWorker.js","index.js"],"names":["GroceryItem","formatTimestamp","time","date","props","minute","getMinutes","getHours","getMonth","getDate","className","this","item","onClick","Component","GROCERY_OBJECTS","App","handleChange","e","target","name","value","setState","handleKeyPress","key","handleClickAddItem","state","itemInput","trim","isButtonDisabled","object","description","Date","push","groceries","setTimeout","handleClickRemoveItem","i","length","splice","sort","prevProps","prevState","a","b","type","onChange","onKeyPress","placeholder","id","map","grocery","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fa195db.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GroceryItem extends Component {\n    formatTimestamp = () => {\n        const { date } = this.props;\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n        const minute = date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes();\n        let time;\n\n        if (date.getHours() > 0 && date.getHours() < 12) {\n            time = `${date.getHours()}:${minute} AM`;\n\n        } else if (date.getHours() === 0){\n            time = `12:${minute} AM`;\n\n        } else if (date.getHours() === 12) {\n            time = `12:${minute} PM`;\n\n        } else {\n            time = `${date.getHours() - 12}:${minute} PM`;\n        }\n\n        return `${months[date.getMonth()]} ${date.getDate()} ${time}`;\n    }\n\n    render() {\n        return(\n            <li>\n                <div className=\"item-wrapper\">\n                    <span className=\"description\">{this.props.item}</span>\n                    <div className=\"item-details\">\n                        <span className=\"time\">{this.formatTimestamp()}</span>\n                        <button onClick={() => this.props.onClick(this.props.date)}>Delete</button>\n                    </div>                    \n                </div>                \n            </li>\n        );\n    }\n}\n\nexport default GroceryItem;","import React, { Component } from 'react';\nimport GroceryItem from './GroceryItem';\nimport './App.css';\n\nconst GROCERY_OBJECTS = [];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      groceries: [],\n      itemInput: '',\n      isButtonDisabled: false,\n      sort: 'timestamp'\n    };\n  }\n\n  handleChange = (e) => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  }\n\n  handleKeyPress = (e) => {\n    if(e.key === 'Enter'){\n      this.handleClickAddItem();\n    }\n  }\n\n  handleClickAddItem = () => {\n    if(this.state.itemInput.trim() !== '' && this.state.isButtonDisabled === false) {\n      const object = { description: this.state.itemInput, date: new Date() };\n      GROCERY_OBJECTS.push(object);\n\n      this.setState({ \n        groceries: GROCERY_OBJECTS,\n        itemInput: '',\n        isButtonDisabled: true\n      });\n      // setTimeout to prevent duplicate keys in the grocery list\n      setTimeout(() => this.setState({ isButtonDisabled: false }), 1000);\n    }    \n  }\n\n  handleClickRemoveItem = (date) => {\n    for(let i = 0; i < GROCERY_OBJECTS.length; i++) {\n      if(GROCERY_OBJECTS[i].date === date) {\n        GROCERY_OBJECTS.splice(i, 1);\n        this.setState({ groceries: GROCERY_OBJECTS });\n      }\n    }  \n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { sort } = this.state;\n\n    if(prevState.sort !== sort) {\n      if(sort === \"ascending\") {\n        GROCERY_OBJECTS.sort((a, b) => {\n          if(a.description > b.description) return 1;\n          if(b.description > a.description) return -1;\n          return 0;\n        });\n\n      } else if(sort === \"descending\") {\n        GROCERY_OBJECTS.sort((a, b) => {\n          if(b.description > a.description) return 1;\n          if(a.description > b.description) return -1;\n          return 0;\n        });        \n\n      } else {\n        GROCERY_OBJECTS.sort((a, b) => a.date - b.date);\n      }\n\n      this.setState({ groceries: GROCERY_OBJECTS });\n    }\n  }\n\n  render() {\n    const { groceries } = this.state;\n                    \n    return (\n      <div className=\"App\">\n        <h1>Shopping List</h1>\n        <div>\n          <input \n            type=\"text\"\n            name=\"itemInput\"\n            value={this.state.itemInput}\n            onChange={this.handleChange} \n            onKeyPress={this.handleKeyPress}\n            placeholder=\"Enter Item\"\n          />\n          <button onClick={this.handleClickAddItem}>Add to Shopping List</button>\n        </div><br/>\n        <div id=\"side-container\">\n          <span id=\"total\">Total Items: {GROCERY_OBJECTS.length}</span>\n          <label id=\"sort\">Sort by: </label>\n          <select \n            name=\"sort\"\n            value={this.state.sort}\n            onChange={this.handleChange}\n          >\n            <option value=\"timestamp\">Timestamp</option>\n            <option value=\"ascending\">Ascending</option>\n            <option value=\"descending\">Descending</option>\n          </select>\n        </div>\n        <div id=\"items-container\">\n          <ul>\n            {groceries.map((grocery) => \n                <GroceryItem \n                  key={grocery.date}\n                  item={grocery.description}\n                  date={grocery.date}\n                  onClick={this.handleClickRemoveItem}\n                />              \n            )}\n          </ul>\n        </div>\n      </div>\n    );\n  }  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}